generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  // Fields moved from Customer
  phone              String?
  address            String?
  externalCustomerId String?

  accounts Account[]
  sessions Session[]
  invoices Invoice[] // Relation: A user has many invoices
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invoice {
  id                String       @id @default(cuid())
  amount            Float
  status            String
  dueDate           DateTime
  customer          User         @relation(fields: [customerId], references: [id])
  customerId        String
  externalInvoiceId String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime?    @updatedAt
  InvoiceLog        InvoiceLog[]
}

model InvoiceLog {
  id           String   @id @default(cuid())
  invoiceId    String
  invoice      Invoice  @relation(fields: [invoiceId], references: [id])
  fieldChanged String
  oldValue     String?
  newValue     String?
  changedAt    DateTime @default(now())
}

// generator client {
//   provider = "prisma-client-js"
//   output   = "./generated/client"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id             String    @id @default(cuid())
//   name           String?
//   email          String?   @unique
//   emailVerified  DateTime?
//   image          String?
//   hashedPassword String?

//   accounts Account[]
//   sessions Session[]
//   Customer Customer[]
// }

// model Account {
//   id                String  @id @default(cuid())
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Customer {
//   id                 String    @id @default(cuid())
//   name               String
//   email              String    @unique
//   phone              String?
//   address            String?
//   createdAt          DateTime  @default(now())
//   externalCustomerId String?
//   userId             String
//   user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   Invoice            Invoice[]
// }

// model Invoice {
//   id                String       @id @default(cuid())
//   amount            Float
//   status            String
//   dueDate           DateTime
//   customer          Customer     @relation(fields: [customerId], references: [id])
//   customerId        String
//   externalInvoiceId String?
//   createdAt         DateTime     @default(now())
//   updatedAt         DateTime?    @updatedAt
//   InvoiceLog        InvoiceLog[]
// }

// model InvoiceLog {
//   id           String   @id @default(cuid())
//   invoiceId    String
//   invoice      Invoice  @relation(fields: [invoiceId], references: [id])
//   fieldChanged String
//   oldValue     String?
//   newValue     String?
//   changedAt    DateTime @default(now())
// }
